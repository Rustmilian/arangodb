/* global arangoHelper, arangoFetch, frontendConfig, document, $ */
import React, { useState, useEffect, useCallback, useRef } from 'react';
import styled from "styled-components";
import { JsonEditor as Editor } from 'jsoneditor-react';
import { Modal, Button, Input, notification, Space, Select, Tooltip } from 'antd';
import { InfoCircleOutlined } from '@ant-design/icons';

const ModalBackground = styled.div`
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0, 0, 0, 0.5);
`;

const ModalBody = styled.div`
  background-color: white;
  margin: 10% auto;
  padding: 20px;
  width: 50%;
`;

  export const AddEdgeModal = ({ edgeModelToAdd, shouldShow, onUpdateEdge, onRequestClose, edge, edgeCollections, edgeData, editorContent, children, edgeKey, edgeCollection, onEdgeCreation, graphName, graphData, nodeFrom, nodeTo }) => {

    const { Option } = Select;
    const keyInputRef = useRef();
    const jsonEditorRef = useRef();
    const [json, setJson] = useState(edgeData);
    const [collection, setCollection] = useState([]);


    const openNotificationWithIcon = edgeName => {
      notification['success']({
        message: 'Edge created',
        description:
          `The edge ${edgeName} was successfully created`,
      });
    };

    const addEdge = (graphData, updateEdgeId) => {

    const key = keyInputRef.current.state.value;
    if (key !== '' && key !== undefined) {
      json._key = key;
    }

    json._from = edgeModelToAdd.source;
    json._to = edgeModelToAdd.target;

    $.ajax({
      type: 'POST',
      url: arangoHelper.databaseUrl('/_api/gharial/') + encodeURIComponent(graphName) + '/edge/' + encodeURIComponent(collection),
      contentType: 'application/json',
      data: JSON.stringify(json),
      processData: true,
      success: function (response) {
        console.log("data after edge creation: ", response);
        const edgeModel = {
          id: response.edge._id,
          label: response.edge._key,
          source: edgeModelToAdd.source,
          target: edgeModelToAdd.target
        };
        openNotificationWithIcon(response.edge._id);
        onEdgeCreation(edgeModel);
        onRequestClose();
      },
      error: function (response) {
        console.log("response after addEdge (error): ", response);
      }
    });
    }

    const handleChange = (value) => {
      console.log("edgeModelToAdd: ", edgeModelToAdd);
      setCollection(value);
    }

  return shouldShow ? (
      <ModalBackground onClick={onRequestClose}>
        <ModalBody onClick={(e) => e.stopPropagation()}>
          <div>
            {children}<br />
            <strong>_from:</strong> {edgeModelToAdd.source}<br />
            <strong>_to:</strong> {edgeModelToAdd.target}
          </div>
          <Input
            ref={keyInputRef}
            addonBefore="_key"
            placeholder="is optional: leave empty for autogenerated key"
            suffix={
              <Tooltip title="The edge's unique key (optional attribute, leave empty for autogenerated key)">
                <InfoCircleOutlined style={{ color: 'rgba(0,0,0,.45)' }} />
              </Tooltip>
            }
            style={{ width: "100%", marginTop: '24px', marginBottom: '24px' }}
          />
          <Select
            placeholder="Please choose the edge collection"
            style={{ width: "100%", marginBottom: '24px' }}
            onChange={handleChange}
            suffixIcon={
              <Tooltip title="Please select the target collection for the new edge.">
                <InfoCircleOutlined style={{ color: 'rgba(0,0,0,.45)' }} />
              </Tooltip>
            }
          >
            {
              edgeCollections.map((edgeCollection) => {
                return <Option value={edgeCollection.name}>{edgeCollection.name}</Option>;
              })
            }
          </Select>
          <div>
            {
              edgeData ? (
                <Editor
                  ref={jsonEditorRef}
                  value={edgeData}
                  onChange={(value) => {
                    console.log('Data in jsoneditor changed (AddEdgeModal): ', value);
                    setJson(value);
                  }}
                  mode={'code'}
                  history={true} />
              ) : 'Data is loading...'
            }
          </div>
          <div style={{ 'marginTop': '38px', 'textAlign': 'right' }}>
            <button className="button-close" onClick={onRequestClose}>Cancel</button>
            <button className="button-success" onClick={() => { addEdge(edge) }}>Create</button>
          </div>
        </ModalBody>
      </ModalBackground>
  ) : null;
};
