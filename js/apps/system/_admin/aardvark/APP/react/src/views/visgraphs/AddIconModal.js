/* global arangoHelper, $ */
import React, { useContext, useState, useRef, useEffect } from 'react';
import { UrlParametersContext } from "./url-parameters-context";
import styled from "styled-components";
import ToolTip from '../../components/arango/tootip';
import {
  Flex,
  Spacer } from '@chakra-ui/react';

const ModalBackground = styled.div`
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0, 0, 0, 0.5);
`;

const ModalBody = styled.div`
  background-color: white;
  margin: 5% auto;
  padding: 20px;
  width: 50%;
`;

const StyledButton = styled.button`
  margin-left: 15px !important;
  color: white !important;
`;

export const AddIconModal = ({ shouldShow, onRequestClose, vertexCollections, onAddIcon, onIconAdded, children }) => {

  const [urlParameters, setUrlParameters] = useContext(UrlParametersContext);
  const keyInputRef = useRef();
  const [collection, setCollection] = useState([]);

  useEffect(() => {
    if(shouldShow && vertexCollections.length){
      setCollection(vertexCollections[0].name)
    }
   
  }, [vertexCollections, shouldShow]);

  const openNotificationWithIcon = nodeName => {
    arangoHelper.arangoNotification(`The node ${nodeName} was successfully created`);
  };

  const addIcon = (graphData, updateNodeId) => {

    const key = keyInputRef.current.value;
    /*
    let newJson = {...json};
    if (key !== '' && key !== undefined) {
      newJson = {...newJson, _key: key};
    }
    */

    /*
    $.ajax({
      type: 'POST',
      url: arangoHelper.databaseUrl('/_api/gharial/') + encodeURIComponent(graphName) + '/vertex/' + encodeURIComponent(collection),
      contentType: 'application/json',
      data: JSON.stringify(newJson),
      processData: true,
      success: function (response) {
        const nodeModel = {
          id: response.vertex._id,
          label: response.vertex._key,
          shape: "dot"
        };
        openNotificationWithIcon(response.vertex._id);
        onIconAdded(nodeModel);
        onRequestClose();
      },
      error: function (response) {
        arangoHelper.arangoError('Graph', 'Could not add node.');
        console.log("Error adding this node: ", response);
      }
    });
    */
  }

  if (!shouldShow) {
    return null;
  }

  return (
    <ModalBackground onClick={onRequestClose}>
      <ModalBody onClick={(e) => e.stopPropagation()}>
        <div>
          {children}<br />
        </div>
        
        {
            /*
            <label for="nodeKey" style={{ 'marginTop': '12px' }}>
                _key
            </label>
            <div style={{ 'width': '100%', 'background': '#ffffff', 'display': 'flex', 'alignItems': 'center' }}>
                <input
                name="nodeKey"
                type="text"
                ref={keyInputRef}
                placeholder="is optional: leave empty for autogenerated key"
                style={{ width: "100%", marginRight: '8px' }}
                />
                <ToolTip
                title={"The node's unique key (optional attribute, leave empty for autogenerated key)"}
                setArrow={true}>
                <span className="arangoicon icon_arangodb_info" style={{ fontSize: '16px', color: '#989CA1', marginBottom: '10px' }}></span>
                </ToolTip>
            </div>
            */
        }

        <label for="vertexCollection" style={{ 'marginTop': '12px' }}>
          Vertex collection
        </label>
            {
              vertexCollections.map((vertexCollection) => {
                const collectionKey = vertexCollection.name + "NodeIcon";
                console.log("collectionKey: ", collectionKey);

                let currentNodeIcon = "";
                if(urlParameters[collectionKey]) {
                    console.log("collectionKey in urlparameters exists: ", urlParameters[collectionKey].toString());
                    currentNodeIcon = urlParameters[collectionKey];
                } else {
                    console.log("No icon given for ", collectionKey);
                }
                return (
                    <div style={{ 'width': '100%', 'background': '#ffffff', 'display': 'flex', 'alignItems': 'baseline' }}>
                        <label for={`Collection${vertexCollection.name}`} style={{ 'marginTop': '12px' }}>
                            {vertexCollection.name}
                        </label>
                        <div style={{ 'width': '100%', 'background': '#ffffff', 'display': 'flex', 'alignItems': 'center' }}>
                            <input
                            name="nodeKey"
                            type="text"
                            ref={keyInputRef}
                            value={currentNodeIcon}
                            style={{ width: "100%", marginRight: '8px' }}
                            />
                            <ToolTip
                            title={"The node's unique key (optional attribute, leave empty for autogenerated key)"}
                            setArrow={true}>
                            <span className="arangoicon icon_arangodb_info" style={{ fontSize: '16px', color: '#989CA1', marginBottom: '10px' }}></span>
                            </ToolTip>
                        </div>
                    </div>
                );
              })
            }
        <Flex direction='row' mt='38'>
          <Spacer />
          <StyledButton className="button-close" onClick={onRequestClose}>Cancel</StyledButton>
          <StyledButton
            className="button-success"
            onClick={() => {
                console.log("Add icon to collection");
            }}>Save</StyledButton>
        </Flex>
      </ModalBody>
    </ModalBackground>
  );
};
