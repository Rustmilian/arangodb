/* global arangoHelper, $ */
import React, { useState, useRef, useEffect } from 'react';
import styled from "styled-components";
import { JsonEditor as Editor } from 'jsoneditor-react';
import ToolTip from '../../components/arango/tootip';

const ModalBackground = styled.div`
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0, 0, 0, 0.5);
`;

const ModalBody = styled.div`
  background-color: white;
  margin: 5% auto;
  padding: 20px;
  width: 50%;
`;

const StyledButton = styled.button`
  margin-left: 15px !important;
  color: white !important;
`;

export const AddEdgeModal = ({ edgeModelToAdd, shouldShow, onUpdateEdge, onRequestClose, edge, edgeCollections, edgeData, editorContent, children, edgeKey, edgeCollection, onEdgeCreation, graphName, graphData, nodeFrom, nodeTo }) => {

  const keyInputRef = useRef();
  const jsonEditorRef = useRef();
  const [json, setJson] = useState(edgeData);
  const [collection, setCollection] = useState([]);

  useEffect(() => {
    if(shouldShow && edgeCollections.length){
      setCollection(edgeCollections[0].name)
    }
   
  }, [edgeCollections, shouldShow]);

  const openNotificationWithIcon = edgeName => {
    arangoHelper.arangoNotification(`The edge ${edgeName} was successfully created`);
  };

  const addEdge = (graphData, updateEdgeId) => {
    const key = keyInputRef.current.value;
    if (key !== '' && key !== undefined) {
      json._key = key;
    }

    json._from = edgeModelToAdd.from;
    json._to = edgeModelToAdd.to;

    $.ajax({
      type: 'POST',
      url: arangoHelper.databaseUrl('/_api/gharial/') + encodeURIComponent(graphName) + '/edge/' + encodeURIComponent(collection),
      contentType: 'application/json',
      data: JSON.stringify(json),
      processData: true,
      success: function (response) {
        const edgeModel = {
          id: response.edge._id,
          label: response.edge._key,
          from: edgeModelToAdd.from,
          to: edgeModelToAdd.to
        };
        openNotificationWithIcon(response.edge._id);
        onEdgeCreation(edgeModel);
        onRequestClose(true);
      },
      error: function (response) {
        console.log("Error: Could not create edge: ", response);
        arangoHelper.arangoError('Graph', 'Could not create edge.');
      }
    });
  }

  const cancelEdge = () => {
    onRequestClose(false);
  }

  const handleChange = (event) => {
    setCollection(event.target.value);
  }

  if (!shouldShow) {
    return null;
  }

  return (
    <ModalBackground onClick={() => onRequestClose(false)}>
      <ModalBody onClick={(e) => e.stopPropagation()}>
        <div>
          {children}<br />
          <strong>_from:</strong> {edgeModelToAdd.from}<br />
          <strong>_to:</strong> {edgeModelToAdd.to}
        </div>

        <div>
          <label for="vertexCollection">
            _key
          </label>
          <input
            type="text"
            ref={keyInputRef}
            onChange={handleChange}
            placeholder="is optional: leave empty for autogenerated key"
            style={{ width: "100%", marginTop: '24px', marginBottom: '24px' }}
          />
          <ToolTip
            title={"The edge's unique key (optional attribute, leave empty for autogenerated key)"}
            setArrow={true}>
            <span className="arangoicon icon_arangodb_info" style={{ fontSize: '16px', color: '#989CA1' }}></span>
          </ToolTip>
        </div>

        <label for="edgeCollection" style={{ 'color': '#ffffff', 'width': '150px' }}>Edge collection</label>
        <select
          placeholder="Please choose the edge collection"
          name="edgeCollection"
          onChange={handleChange}
          style={{
            width: '100%',
            marginBottom: '24px'
          }}
        >
          {
            edgeCollections.map((edgeCollection) => {
              return (
                <option key={edgeCollection.name} value={edgeCollection.name}>{edgeCollection.name}</option>
              );
            })
          }
        </select>
        <ToolTip
          title={"Please select the target collection for the new edge."}
          setArrow={true}
        >
          <span className="arangoicon icon_arangodb_info" style={{ fontSize: '16px', color: '#989CA1' }}></span>
        </ToolTip>
        
        <div>
          {
            edgeData ? (
              <Editor
                ref={jsonEditorRef}
                value={edgeData}
                onChange={(value) => {
                  setJson(value);
                }}
                mode={'code'}
                history={true} />
            ) : 'Data is loading...'
          }
        </div>
        <div style={{ 'marginTop': '38px', 'textAlign': 'right' }}>
          <StyledButton className="button-close" onClick={() => cancelEdge()}>Cancel</StyledButton>
          <StyledButton className="button-success" onClick={() => { addEdge(edge) }}>Create</StyledButton>
        </div>
      </ModalBody>
    </ModalBackground>
  );
};
