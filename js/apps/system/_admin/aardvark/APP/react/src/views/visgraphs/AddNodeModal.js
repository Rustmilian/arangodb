/* global arangoHelper, $ */
import React, { useState, useRef } from 'react';
import styled from "styled-components";
import { JsonEditor as Editor } from 'jsoneditor-react';
import { Input, Select, Tooltip } from 'antd';
import { InfoCircleOutlined } from '@ant-design/icons';

const ModalBackground = styled.div`
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0, 0, 0, 0.5);
`;

const ModalBody = styled.div`
  background-color: white;
  margin: 5% auto;
  padding: 20px;
  width: 50%;
`;

const StyledButton = styled.button`
  margin-left: 15px !important;
  color: white !important;
`;

  export const AddNodeModal = ({ shouldShow, onUpdateNode, onRequestClose, node, vertexCollections, nodeData, editorContent, children, onNodeCreation, graphName, graphData }) => {

  const { Option } = Select;
  const keyInputRef = useRef();
  const jsonEditorRef = useRef();
  const [json, setJson] = useState(nodeData);
  const [collection, setCollection] = useState([]);
  const SelectOption = Select.Option;

  const openNotificationWithIcon = nodeName => {
    arangoHelper.arangoNotification(`The node ${nodeName} was successfully created`);
  };

  const addNode = (graphData, updateNodeId) => {

    const key = keyInputRef.current.state.value;
    if (key !== '' && key !== undefined) {
      json._key = key;
    }

    $.ajax({
      type: 'POST',
      url: arangoHelper.databaseUrl('/_api/gharial/') + encodeURIComponent(graphName) + '/vertex/' + encodeURIComponent(collection),
      contentType: 'application/json',
      data: JSON.stringify(json),
      processData: true,
      success: function (response) {
        const nodeModel = {
          id: response.vertex._id,
          label: response.vertex._key,
          shape: "dot"
        };
        openNotificationWithIcon(response.vertex._id);
        onNodeCreation(nodeModel);
        onRequestClose();
      },
      error: function (response) {
        arangoHelper.arangoError('Graph', 'Could not add node.');
        console.log("Error adding this node: ", response);
      }
    });
  }

  const handleChange = (value) => {
    setCollection(value);
  }

  return shouldShow ? (
    <ModalBackground onClick={onRequestClose}>
      <ModalBody onClick={(e) => e.stopPropagation()}>
        <div>
          {children}<br />
        </div>
        <Input
          ref={keyInputRef}
          addonBefore="_key"
          placeholder="is optional: leave empty for autogenerated key"
          suffix={
            <Tooltip title="The node's unique key (optional attribute, leave empty for autogenerated key)">
              <InfoCircleOutlined style={{ color: 'rgba(0,0,0,.45)' }} />
            </Tooltip>
          }
          style={{ width: "100%", marginTop: '24px', marginBottom: '24px' }}
        />
        
        <Select
          placeholder="Please choose the vertex collection"
          className="graphReactViewContainer"
          dropdownClassName="graphReactViewContainer"
          style={{
            width: '100%',
            marginBottom: '24px'
          }}
          onChange={handleChange}
          suffixIcon={
            <Tooltip title="Please select the target collection for the new node.">
              <InfoCircleOutlined style={{ color: 'rgba(0,0,0,.45)' }} />
            </Tooltip>
          }
        >
          {
            vertexCollections.map((vertexCollection) => {
              return <SelectOption
                value={vertexCollection.name}
                className='graphReactViewContainer' 
                dropdownClassName="graphReactViewContainer">
                  {vertexCollection.name}
                </SelectOption>;
            })
          }
        </Select>
        <div>
          {
            nodeData ? (
              <Editor
                ref={jsonEditorRef}
                value={nodeData}
                onChange={(value) => {
                  setJson(value);
                }}
                mode={'code'}
                history={true} />
            ) : 'Data is loading...'
          }
        </div>
        <div style={{ 'marginTop': '38px', 'textAlign': 'right' }}>
          <StyledButton className="button-close" onClick={onRequestClose}>Cancel</StyledButton>
          <StyledButton className="button-success" onClick={() => { addNode(node) }}>Create</StyledButton>
        </div>
      </ModalBody>
    </ModalBackground>
  ) : null;
};
