LET toMPS = 1000/3600,
    toKPH = 1/toMPS,
    maxSpeedMPS = (@maxSpeed OR 150) * toMPS // when speed is greater than this (m/s) we count that as an impossible travel 
    
    LET users = @users OR [],
        negation = @negation OR false
        
    LET locations = @locations OR [],
        excludeLocations = @excludeLocations OR false
        
    FOR edge in @@edgeCollection // USER_ACCESSESFROM_LOCATION
        LET user = edge._from
        FILTER LENGTH(users)==0 OR (negation ? user NOT IN users : user IN users)
        
    LET parts = SPLIT(edge._to, ["/", ","]), 
        lat = TO_NUMBER(parts[1]), 
        lon = TO_NUMBER(parts[2])
        
    COLLECT people = edge._from INTO groups = { "lat": lat, "lon": lon, "time": edge.generateTime }
        FOR idx IN 0..LENGTH(groups)-1
            LET p1=groups[idx]
            FOR p2 IN SLICE(groups, idx+1) 
                FILTER LENGTH(locations)==0 OR (excludeLocations 
                                                ? [p1.lat,p1.lon] NOT IN @locations AND [p2.lat,p2.lon] NOT IN locations 
                                                : [p1.lat,p1.lon] IN @locations OR [p2.lat,p2.lon] IN locations)
                                                
                LET timeSeconds = ABS(p1.time - p2.time)  
                LET distMeters = DISTANCE(p1.lat, p1.lon, p2.lat, p2.lon)   
                LET speed = distMeters/timeSeconds
                
                FILTER speed >= maxSpeedMPS
                RETURN {
                    "user": people, 
                    "loc1": [p1.lat, p1.lon], 
                    "loc2": [p2.lat, p2.lon], 
                    'severity': @severity,    
                }
