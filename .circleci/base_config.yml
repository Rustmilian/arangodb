version: 2.1

parameters:
  enterprise-branch:
    type: string
    default: ""


commands:
  checkout-enterprise:
    description: "Checkout enterprise code"
    parameters:
      destination:
        type: string
        default: ""
    steps:
       - add_ssh_keys:
          fingerprints:
            - "f9:49:75:1a:ad:44:89:10:4b:3c:70:70:ba:d3:c3:ce"
       - run:
          name: Checkout Enterprise
          command: |
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            if ["<< pipeline.parameters.enterprise-branch >>" == ""]; then
              set +e
              git ls-remote --exit-code --heads git@github.com:arangodb/enterprise.git "$CIRCLE_BRANCH"
              if [ "$?" == "0" ] ; then
                ENTERPRISE_BRANCH=$CIRCLE_BRANCH
              else
                ENTERPRISE_BRANCH=devel
              fi
              set -e
            else
              ENTERPRISE_BRANCH=<< pipeline.parameters.enterprise-branch >>
            fi
            echo "Using enterprise branch $ENTERPRISE_BRANCH"
            git clone --depth 1 git@github.com:arangodb/enterprise.git --branch "$ENTERPRISE_BRANCH" << parameters.destination >>

jobs:
  minimal-checkout:
    docker:
      - image: cimg/base:current
    resource_class: small
    environment:
      GIT_SSH_COMMAND: ssh -v
    steps:
      - run:
          name: Checkout
          command: |
            git init
            git remote add origin https://github.com/arangodb/arangodb.git
            git fetch --depth 1 origin $CIRCLE_SHA1
            git checkout $CIRCLE_SHA1
      - checkout-enterprise:
          destination: "/home/circleci/project/enterprise"
      - persist_to_workspace:
          root: .
          paths:
            - .

  check-log-ids:
    docker:
      - image: cimg/python:3.11.1
    resource_class: small
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install pyyaml
          command: |
            python -m pip install --upgrade pip
            pip install pyyaml
      - run:
          name: Check LogIDs
          command: |
            python3 utils/checkLogIds.py

  clang-format:
    docker:
      - image: alpine:3.15
    resource_class: small
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install clang-format
          command: |
            apk add --no-cache git bash coreutils grep clang-extra-tools=12.0.1-r1
      - run:
          name: Print clang-format version
          command: clang-format --version
      - run:
          name: Run clang-format
          command: |
            scripts/clang-format-circleci.sh
      - run:
          name: Store diff
          command: |
            git status
            git -C enterprise status
            git diff --exit-code > /tmp/clang_format_outcome.txt
            community=$?
            git -C enterprise diff --exit-code > /tmp/clang_format_outcome_enterprise.txt
            enterprise=$?
            if [ "$community" -ne "0" ] || [ "$enterprise" -ne "0" ]; then
              exit 1
            fi
      - store_artifacts:
          path: /tmp/clang_format_outcome.txt
          path: /tmp/clang_format_outcome_enterprise.txt

  eslint:
    docker:
      - image: alpine:3.17
    resource_class: small
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install eslint
          command: |
            apk add --no-cache npm
            npm -g install eslint
      - run:
          name: Run eslint
          command: |
            utils/eslint.sh

  compile-linux-aarch64:
    parameters:
      preset:
        type: string
      edition:
        type: string
      enterprise:
        type: boolean
    machine: true
    resource_class: arangodb/aws-arm
    environment:
      GIT_SSH_COMMAND: ssh
      SCCACHE_ERROR_LOG: /tmp/sccache.log
      SCCACHE_LOG: info,sccache::cache=debug,sccache::compiler::compiler=debug
    steps:
      - run:
          name: Checkout ArangoDB
          command: |
            mkdir project && cd project
            git init --initial-branch devel
            git remote add origin https://github.com/arangodb/arangodb.git
            git fetch --depth 1 origin $CIRCLE_SHA1
            git checkout $CIRCLE_SHA1
            git submodule init
            git submodule update --recursive --depth 1 --jobs 8
      - run:
          name: Print SCCache Settings
          command: |
            rm $SCCACHE_ERROR_LOG -f
            touch $SCCACHE_ERROR_LOG
            docker run --rm \
              -v $SCCACHE_ERROR_LOG:$SCCACHE_ERROR_LOG \
              -e SCCACHE_ERROR_LOG \
              -e SCCACHE_LOG \
              -e AWS_ACCESS_KEY_ID \
              -e AWS_SECRET_ACCESS_KEY \
              -e SCCACHE_BUCKET \
              arangodb/build-alpine-aarch64:3.16-gcc11.2-openssl3.1.1 sccache -s
      - run:
          name: Configure
          command: |
            docker run --rm \
              -v $SCCACHE_ERROR_LOG:$SCCACHE_ERROR_LOG \
              -v `pwd`/project:/root/project \
              -e SCCACHE_ERROR_LOG \
              -e SCCACHE_LOG \
              -e AWS_ACCESS_KEY_ID \
              -e AWS_SECRET_ACCESS_KEY \
              -e SCCACHE_BUCKET \
              -w /root/project \
              arangodb/build-alpine-aarch64:3.16-gcc11.2-openssl3.1.1 \
              /bin/sh -c "cmake --preset << parameters.preset >> -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" -DCMAKE_LIBRARY_PATH=\$OPENSSL_ROOT_DIR/lib"
      - run:
          name: Build
          command: |
            docker run --rm \
              -v $SCCACHE_ERROR_LOG:$SCCACHE_ERROR_LOG \
              -v ./project:/root/project \
              -e SCCACHE_ERROR_LOG \
              -e SCCACHE_LOG \
              -e AWS_ACCESS_KEY_ID \
              -e AWS_SECRET_ACCESS_KEY \
              -e SCCACHE_BUCKET \
              -e SCCACHE_S3_KEY_PREFIX=aarch64 \
              -w /root/project \
              arangodb/build-alpine-aarch64:3.16-gcc11.2-openssl3.1.1 \
              /bin/sh -c "cmake --build --preset << parameters.preset >> --parallel 8 --target arangodbtests arangod arangosh arangoimport arangoexport arangodump arangorestore arangobench fuertetest && sccache -s"
            # if [ << parameters.enterprise >> = true ]; then
            #   cmake --build --preset << parameters.preset >> --parallel 8 --target arangobackup
            # fi
      - run:
          name: Size leaderboard
          command: |
            ls -Ssha project/build/bin/*.a
      - run:
          name: Cleanup build directory
          command: |
            find project/build/ -iname *.a -delete || true
            find project/build/ -iname *.o -delete || true
      # - store_artifacts:
      #     path: build/bin/arango*
      - store_artifacts:
          path: /tmp/sccache.log
      - persist_to_workspace:
          root: ./project
          paths:
            - CMakePresets.json
            - build/
            - scripts/
            - js/
            - enterprise/js
            - etc/
            - tests/js
            - enterprise/tests/js
            - utils
            - UnitTests
            - 3rdParty/iresearch/tests/resources
            - 3rdParty/rta-makedata

  run-tests:
    machine:
      image: ubuntu-2004:202101-01
    # docker:
    #   - image: cimg/python:3.11.1
    parameters:
      suiteName:
        type: string
      suites:
        type: string
      size:
        type: string
      extraArgs:
        type: string
        default: ""
      buckets:
        type: integer
        default: 1
      cluster:
        type: boolean
    #resource_class: << parameters.size >>
    resource_class: arm.<< parameters.size >>
    parallelism: << parameters.buckets >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Enabled coredumps
          command: ulimit -c unlimited
      - run:
          name: Install dependencies
          command: |
            pip3 install psutil py7zr
            sudo apt update
            sudo apt install p7zip gdb
      - run:
          name: Run << parameters.suiteName >> tests
          command: |
            mkdir work
            # Note: we need the leading space for extraArgs to avoid a parsing issue in argparse
            python3 scripts/test/test_launch_controller.py << parameters.suites >> \
              --testBuckets $CIRCLE_NODE_TOTAL/$CIRCLE_NODE_INDEX \
              --cluster << parameters.cluster >> \
              --extraArgs " << parameters.extraArgs >>" \
              --definition tests/test-definitions.txt
      - run:
          name: Copy test results
          when: always
          command: |
            mkdir test-results
            find testrunXml -iname *xml -exec cp "{}" --target-directory=./test-results \;
      - store_artifacts:
          destination: << parameters.suiteName >>
          path: ./work/
      - store_test_results:
          path: ./test-results/

workflows:
  # lint:
  #   jobs:
  #     - minimal-checkout:
  #         name: minimal-checkout
  #     - check-log-ids:
  #         name: check-log-ids
  #         requires:
  #           - minimal-checkout
  #     - clang-format:
  #         name: clang-format
  #         requires:
  #           - minimal-checkout
  #     - eslint:
  #         name: eslint
  #         requires:
  #           - minimal-checkout
  community-pr:
    jobs:
      # - compile-linux:
      #     name: build-ce
      #     preset: community-pr
      #     edition: x64-community
      #     enterprise: false
      - compile-linux-aarch64:
          name: build-ce
          preset: community-pr-arm
          edition: aarch64-community
          enterprise: false
  # enterprise-pr:
  #   jobs:
  #     - compile-linux:
  #         name: build-ee
  #         preset: enterprise-pr
  #         edition: x64-enterprise
  #         enterprise: true
